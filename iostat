#!/bin/bash
#
# Version 0.1.1 - March 2014
# Changes: added device verification
#
# Original code by Thiago Varela - thiago@iplenix.com
# modified by Andrew Spiers - andrew@andrewspiers.net




#Copyright 2009-2014 the Authors
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
#


iostat=`which iostat 2>/dev/null`
bc=`which bc 2>/dev/null`

function help {
echo -e "\n\tThis plugin shows the I/O usage of the specified disk, using the iostat external program.\n\tIt prints three statistics: Transactions per second (tps), Kilobytes per second\n\tread from the disk (KB_read/s) and and written to the disk (KB_written/s)\n\n$0:\n\t-d <disk>\t\tDevice to be checked (without the full path, eg. sda)\n\t-c <tps>,<read>,<wrtn>\tSets the CRITICAL level for tps, KB_read/s and KB_written/s, respectively\n\t-w <tps>,<read>,<wrtn>\tSets the WARNING level for tps, KB_read/s and KB_written/s, respectively\n"
	exit -1
}

# Ensuring we have the needed tools:
( [ ! -f $iostat ] || [ ! -f $bc ] ) && \
	( echo "ERROR: You must have iostat and bc installed in order to run this plugin" && exit -1 )

# Getting parameters:
while getopts "d:w:c:h" OPT; do
	case $OPT in
		"d") disk=$OPTARG;;
		"w") warning=$OPTARG;;
		"c") critical=$OPTARG;;
		"h") help;;
	esac
done

# Adjusting the three warn and crit levels:
crit_tps=`echo $critical | cut -d, -f1`
crit_read=`echo $critical | cut -d, -f2`
crit_written=`echo $critical | cut -d, -f3`
crit_await=$(echo $critical | cut -d, -f4)
crit_r_await=$(echo $critical | cut -d, -f5)
crit_w_await=$(echo $critical | cut -d, -f6)

warn_tps=`echo $warning | cut -d, -f1`
warn_read=`echo $warning | cut -d, -f2`
warn_written=`echo $warning | cut -d, -f3`
warn_await=$(echo $warning | cut -d, -f4)
warn_r_await=$(echo $warning | cut -d, -f5)
warn_w_await=$(echo $warning | cut -d, -f6)


# Checking parameters:
[ ! -b "/dev/$disk" ] && echo "ERROR: Device incorrectly specified" && help

( [ "$warn_tps" == "" ] || [ "$warn_read" == "" ] || [ "$warn_written" == "" ] || \
  [ "$crit_tps" == "" ] || [ "$crit_read" == "" ] || [ "$crit_written" == "" ] ) &&
	echo "ERROR: You must specify all warning and critical levels" && help

( [[ "$warn_tps" -ge  "$crit_tps" ]] || \
  [[ "$warn_read" -ge  "$crit_read" ]] || \
  [[ "$warn_written" -ge  "$crit_written" ]] ) && \
  echo "ERROR: critical levels must be highter than warning levels" && help


# Doing the actual check:
tps=`$iostat $disk | grep $disk | awk '{print $2}'`
kbread=`$iostat $disk | grep $disk | awk '{print $3}'`
kbwritten=`$iostat $disk | grep $disk | awk '{print $4}'`
await=$(iostat -x $disk | grep $disk | awk '{print $10}')
r_await=$(iostat -x $disk | grep $disk | awk '{print $11}')
w_await=$(iostat -x $disk | grep $disk | awk '{print $12}')


# Comparing the result and setting the correct level:
if ( [ "`echo "$tps       >= $crit_tps"     | bc`" == "1" ] ||
     [ "`echo "$kbread    >= $crit_read"    | bc`" == "1" ] ||
     [ "`echo "$kbwritten >= $crit_written" | bc`" == "1" ] ||
     [ "`echo "$await     >= $crit_await"   | bc`" == "1" ] ||
     [ "`echo "$r_await   >= $crit_r_await" | bc`" == "1" ] ||
     [ "`echo "$w_await   >= $crit_w_await" | bc`" == "1" ]
   );
 then
        msg="CRITICAL"
        status=2
else if ( [ "`echo "$tps       >= $warn_tps"     | bc`" == "1" ] ||
          [ "`echo "$kbread    >= $warn_read"    | bc`" == "1" ] ||
          [ "`echo "$kbwritten >= $warn_written" | bc`" == "1" ] ||
          [ "`echo "$await     >= $warn_await"   | bc`" == "1" ] ||
          [ "`echo "$r_await   >= $warn_r_await" | bc`" == "1" ] ||
          [ "`echo "$w_await   >= $warn_w_await" | bc`" == "1" ]

        ); then
        	msg="WARNING"
        	status=1
     else
        msg="OK"
        status=0
     fi
fi

# Printing the results:
#echo "$msg - I/O stats tps=$tps KB_read/s=$kbread KB_written/s=$kbwritten | 'tps'=$tps; 'KB_read/s'=$kbread; 'KB_written/s'=$kbwritten;"
echo "$msg - I/O stats tps=$tps KB_read/s=$kbread KB_written/s=$kbwritten await=$await r_await=$r_await w_await=$w_await | 'tps'=$tps; 'KB_read/s'=$kbread; 'KB_written/s'=$kbwritten; 'await'=$await; 'r_await'=$r_await; 'w_await'=$w_await;"

# Bye!
exit $status
